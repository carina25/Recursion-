#1-FuncionFactorial

 def factorial (x,n) :
     x= factorial (x,n-1) :
     x=x*n
else:
     x=1
return x 

#2-Producto de una lista de números:

  def listadenumeros (num = [a]-a) :
      a= [1]
      a=n* products ns []
     return lista ():

#3-Longitud de una lista:

  def longituddeunalista () :
      len = [a]
      len = [0]
      len [:x,s] = 1+ len xs
      return len ()

#4-Inversa de una lista:   
  
def rev(l):
    if not l: return []
    return [l[-1]] + rev(l[:-1])

reverse  [5,2,6,8,3]
= (reverse [8,6]) ++ [5]
= ((reverse [5]) ++ [3]) ++ [2]
= (((reverse []) ++ [5]) ++ [3]) ++ [2]
= (([8] ++ [6]) ++ [5]) ++ [3] ++ [2]
= ([3] ++ [5]) ++ [2]
= [3,5] ++ [2]
= [8,6,5,3,2]


#5-sumarl :: [a] -> [a] -> [a]
sumarl []     _      = []
sumarl _      []     = []
sumarl (x:xs) (y:ys) = [x+y] ++ sumarl xs ys
sumarl [5,2,6,8] [10,3,4,2]

[5,2,6,8] ++ [10,3,4,2]
= 1:([2,6,8] ++ [10,3,4,2])
= 1:(2:(5(6[8] ++ [10,4,3,2])
= [1,2,6,8,10,3,4,2]

def sumar1(n):
   
    if   (n == 5):
        return 6
    elif (n == 2):
        return 3
    elif (n == 6):
        return 7
    if   (n == 8) :
         return 9
    else:   
        return sumar1 (n+1) + a 6 (n+1) + a 3 (n+1) a 6 (n+1) a 8

#4-Recursión múltiple

#Fibonacci

def Fibonacci(n): 
      if n< 0 : 
          print ( "Incorrect input" ) 
      elif n = = 1 : 
          return 0 
      elif n = = 2 : 
          return 1 
      else : 
          return Fibonacci(n - 2) + Fibonacci(n - 1 ) 
 
    print (Fibonacci( 8 )) 

#Subir la escalera

#formas n::  Int->Int
#formas 1 = 1
#formas 2 = 2
#formas n = formas(n-1) + formas(n-2)
#formas 5

 def Fibonacci(n): 
      if n< 0 : 
          print ( "Incorrect input" ) 
 
      elif n = = 1 : 
          return 2
  
      elif n = = 2 : 
          return 3

      elif n = = 3:
          return 4

      else : 
          return Fibonacci(n - 1 ) + Fibonacci(n - 2 ) 
     print (Fibonacci ( 5)) 

 5 Recursión mutua
Par e impar por recursión mutua:
par :: Int -> Bool
par 0 = True
par n = impar (n-1)

impar :: Int -> Bool
impar 0 = False
impar n = par (n-1)

par (7)

par :: Int -> Bool
par 0 = True
par n = impar (n-1)

impar :: Int -> Bool
impar 0 = False
impar n = par (n-1)
